// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                  String                   @id @default(uuid())
  name                String
  imageUrl            String
  deliveryFee         Decimal                  @db.Decimal(13, 2)
  deliveryTimeMinutes Int
  categories          Category[] // Relation many-to-many with category
  products            Product[]
  orders              Order[]
  favoriteForUsers    UserFavoriteRestaurant[]
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageUrl    String
  restaurants Restaurant[] // Relation many-to-many with restaurant
  products    Product[]
  createdAt   DateTime     @default(now())
}

model Product {
  id              String         @id @default(uuid())
  name            String
  description     String
  imageUrl        String
  price           Decimal        @db.Decimal(10, 2)
  restaurantId    String
  discountPercent Int            @default(0)
  restaurant      Restaurant     @relation(fields: [restaurantId], references: [id]) // Create relation with by restaurantId and id (of table restaraunt), require npx prisma format.
  categoryId      String
  category        Category       @relation(fields: [categoryId], references: [id]) // Create relation with by categoryId and id (of table category), require npx prisma format.
  createdAt       DateTime       @default(now())
  OrderProduct    OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

// deliveryFee, subtotalPrice, totalPrice, totalDiscounts serão salvos na order para que:
// - Caso o pedido seja realizado, este será salvo com os valores no momento em que foi salvo.
// - Portanto caso os valores sejam alterados, se manterão os valores anteriores referentes as datas em que os pedidos foi feitos.
model Order {
  id                  String         @id @default(uuid())
  userId              String
  user                User           @relation(fields: [userId], references: [id])
  products            OrderProduct[]
  restaurant          Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId        String
  deliveryFee         Decimal        @db.Decimal(10, 2)
  deliveryTimeMinutes Int
  subTotalPrice       Decimal        @db.Decimal(10, 2)
  totalPrice          Decimal        @db.Decimal(10, 2)
  totalDiscounts      Decimal        @db.Decimal(10, 2)
  createdAt           DateTime       @default(now())
  status              OrderStatus
}

enum OrderStatus {
  CONFIRMED
  CANCELED
  PREPARING
  DELIVERING
  COMPLETED
}

model UserFavoriteRestaurant {
  userId       String 
  user         User       @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())

  @@id([userId, restaurantId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String                   @id @default(cuid())
  name                String?
  email               String?                  @unique
  emailVerified       DateTime?                @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]
  orders              Order[]
  favoriteRestaurants UserFavoriteRestaurant[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
